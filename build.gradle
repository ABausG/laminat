buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.apache.commons:commons-lang3:3.3.2'
  }
}

subprojects {

    def scalaVersionLookup = [
        '2.10': '2.10.5',
        '2.11': '2.11.6'
    ]

    def m = project.name =~ /.*_(2\.1\d)(_0\.\d+)?/
    if (m.matches()) {
      project.ext {
          scalaVersion = m.group(1)
          scalaFullVersion = scalaVersionLookup[m.group(1)]
          sbtVersion = '0.13.5'
      }

      buildDir = new File(projectDir, "build/" + project.scalaVersion)
    }

    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'groovy'
    apply plugin: 'maven'
    apply plugin: 'signing'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
      if (project.hasProperty('scalaVersion')) {
          compile 'org.slf4j:slf4j-api:1.7.5', "org.scala-lang:scala-library:${project.scalaFullVersion}",
                  "com.typesafe.scala-logging:scala-logging-slf4j_${project.scalaVersion}:2.1.2",
                  "org.json4s:json4s-native_${project.scalaVersion}:3.2.11",
                  "org.json4s:json4s-jackson_${project.scalaVersion}:3.2.11"
          testCompile "org.specs2:specs2_${project.scalaVersion}:2.3.13"

          if (project.scalaVersion == '2.11') {
              compile "org.scala-lang.modules:scala-xml_2.11:1.0.2"
          }
      }

      testCompile 'junit:junit-dep:4.11', 'org.hamcrest:hamcrest-all:1.3', 'org.mockito:mockito-all:1.9.5'
    }

    group = 'au.com.dius'
    version = '2.2.5'
    targetCompatibility = '1.6'
    sourceCompatibility = '1.6'

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.useCompileDaemon = false
        scalaCompileOptions.useAnt = false
        scalaCompileOptions.additionalParameters = ['-target:jvm-1.6']
        configure(scalaCompileOptions.forkOptions) {
          memoryMaximumSize = '1g'
          jvmArgs = ['-XX:MaxPermSize=512m']
        }
    }

    test {
      jvmArgs '-Xss256k', '-XX:MaxPermSize=512m'
    }

    jar {
        manifest.attributes provider: 'gradle',
                'Implementation-Title': project.name, 'Implementation-Version': version,
                'Implementation-Vendor': project.group, 'Implementation-Vendor-Id': project.group,
                'Specification-Vendor': project.group,
                'Specification-Title': project.name,
                'Specification-Version': version
    }

    task javadocJar(type: Jar, dependsOn: [javadoc, scaladoc, groovydoc]) {
        classifier = 'javadoc'
        from javadoc.destinationDir, scaladoc.destinationDir, groovydoc.destinationDir
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar
        archives sourceJar
    }

    def pomCustomisation = {
        name project.name
        description new File(projectDir, 'README.md').text
        url 'https://github.com/DiUS/pact-jvm'
        licenses {
            license {
                name 'Apache 2'
	            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
	            distribution 'repo'
            }
        }
        scm {
            url 'https://github.com/DiUS/pact-jvm'
            connection 'https://github.com/DiUS/pact-jvm.git'
        }

	    developers {
            developer {
                id 'thetrav'
                name 'Travis Dixon'
                email 'the.trav@gmail.com'
            }
            developer {
                id 'rholshausen'
                name 'Ronald Holshausen'
                email 'rholshausen@dius.com.au'
            }
            developer {
                id 'kenbot'
                name 'Ken Scambler'
                email 'ken.scambler@gmail.com'
            }
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {

                beforeDeployment { def deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    if (project.hasProperty('sonatypeUsername')) {
                        authentication(userName: sonatypeUsername, password: sonatypePassword)
                    }
                }

            }
        }
    }

    ext.installer = install.repositories.mavenInstaller
    ext.deployer = uploadArchives.repositories.mavenDeployer
    installer.pom.project(pomCustomisation)
    deployer.pom.project(pomCustomisation)

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
}

tasks.addRule("Pattern: <Task>_<ScalaVersion>") { String taskName ->
  def m = taskName =~ $/(.*)_(\d\.\d+)/$
  if (m.matches()) {
    task(taskName) {
      dependsOn project.childProjects.findAll { it.key.endsWith('_' + m.group(2)) }
        .collect { it.value.getTasksByName(m.group(1), false) }.flatten()
    }
  }
}
